
==================== FINAL INTERFACE ====================
2017-11-12 18:10:39.440517 UTC

interface RubiksCube-0.1.0.0-FagPvnyEIhB998iRCVnGlD:Cube 8002
  interface hash: b4744da8440ad9da6f275a33843f3cba
  ABI hash: bb67d3ff3e38d252f868b1b1b9190465
  export-list hash: 010f9ffac528d26f26b3c2d1fb8d76f6
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f6624f22fcdd76ed0ac6625466e2d712
  sig of: Nothing
  used TH splices: False
  where
exports:
  Cube.startingCube
  Cube.Color{Cube.Blue Cube.Green Cube.Orange Cube.Red Cube.White Cube.Yellow}
  Cube.Cube{Cube.Cube b d f l r u}
  Cube.Face{Cube.Face x xd xl xld xlu xr xrd xru xu}
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
910868b8da0db1dba2f0e7fae5327ce4
  $fEqColor :: GHC.Classes.Eq Cube.Color
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Cube.Color Cube.$fEqColor_$c== Cube.$fEqColor_$c/= -}
910868b8da0db1dba2f0e7fae5327ce4
  $fEqColor_$c/= :: Cube.Color -> Cube.Color -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Cube.Color) (b1 :: Cube.Color) ->
                 case a of wild {
                   Cube.Red
                   -> case b1 of wild1 {
                        DEFAULT -> GHC.Types.True Cube.Red -> GHC.Types.False }
                   Cube.Orange
                   -> case b1 of wild1 {
                        DEFAULT -> GHC.Types.True Cube.Orange -> GHC.Types.False }
                   Cube.Yellow
                   -> case b1 of wild1 {
                        DEFAULT -> GHC.Types.True Cube.Yellow -> GHC.Types.False }
                   Cube.Green
                   -> case b1 of wild1 {
                        DEFAULT -> GHC.Types.True Cube.Green -> GHC.Types.False }
                   Cube.Blue
                   -> case b1 of wild1 {
                        DEFAULT -> GHC.Types.True Cube.Blue -> GHC.Types.False }
                   Cube.White
                   -> case b1 of wild1 {
                        DEFAULT -> GHC.Types.True Cube.White -> GHC.Types.False } }) -}
910868b8da0db1dba2f0e7fae5327ce4
  $fEqColor_$c== :: Cube.Color -> Cube.Color -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Cube.Color) (ds1 :: Cube.Color) ->
                 case ds of wild {
                   Cube.Red
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Cube.Red -> GHC.Types.True }
                   Cube.Orange
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Cube.Orange -> GHC.Types.True }
                   Cube.Yellow
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Cube.Yellow -> GHC.Types.True }
                   Cube.Green
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Cube.Green -> GHC.Types.True }
                   Cube.Blue
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Cube.Blue -> GHC.Types.True }
                   Cube.White
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Cube.White -> GHC.Types.True } }) -}
40c1dfea01fca46b134941625c799199
  $fEqCube :: GHC.Classes.Eq Cube.Cube
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Cube.Cube Cube.$fEqCube_$c== Cube.$fEqCube_$c/= -}
40c1dfea01fca46b134941625c799199
  $fEqCube_$c/= :: Cube.Cube -> Cube.Cube -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SLLLLLLLL)LLLLL),1*U(1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U))><S(S(SLLLLLLLL)LLLLL),1*U(1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Cube.Cube) (b1 :: Cube.Cube) ->
                 case Cube.$fEqCube_$c== a b1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
40c1dfea01fca46b134941625c799199
  $fEqCube_$c== :: Cube.Cube -> Cube.Cube -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SLLLLLLLL)LLLLL),1*U(1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U))><S(S(SLLLLLLLL)LLLLL),1*U(1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Cube.Cube) (w1 :: Cube.Cube) ->
                 case w of ww { Cube.Cube ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case ww1 of ww7 { Cube.Face ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ->
                 case w1 of ww17 { Cube.Cube ww18 ww19 ww20 ww21 ww22 ww23 ->
                 case ww18 of ww24 { Cube.Face ww25 ww26 ww27 ww28 ww29 ww30 ww31 ww32 ww33 ->
                 Cube.$w$c==
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww25
                   ww26
                   ww27
                   ww28
                   ww29
                   ww30
                   ww31
                   ww32
                   ww33
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23 } } } }) -}
7747cc53e94cae867fad4e946235194c
  $fEqFace :: GHC.Classes.Eq Cube.Face
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Cube.Face Cube.$fEqFace_$c== Cube.$fEqFace_$c/= -}
7747cc53e94cae867fad4e946235194c
  $fEqFace_$c/= :: Cube.Face -> Cube.Face -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Cube.Face) (b1 :: Cube.Face) ->
                 case Cube.$fEqFace_$c== a b1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
7747cc53e94cae867fad4e946235194c
  $fEqFace_$c== :: Cube.Face -> Cube.Face -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Cube.Face) (w1 :: Cube.Face) ->
                 case w of ww { Cube.Face ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 case w1 of ww10 { Cube.Face ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ->
                 Cube.$w$c==1
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18
                   ww19 } }) -}
910868b8da0db1dba2f0e7fae5327ce4
  $fShowColor :: GHC.Show.Show Cube.Color
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Cube.Color
                  Cube.$fShowColor_$cshowsPrec
                  Cube.$fShowColor_$cshow
                  Cube.$fShowColor_$cshowList -}
b4e9bd8a428a4f74a3fa67d4edfb9429
  $fShowColor1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "White"#) -}
274a8baeb05dabacac3facbd9d5637b0
  $fShowColor2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Blue"#) -}
e06c142b6f2988c5fd2ed251860e40ba
  $fShowColor3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Green"#) -}
312c23664bd8f4e2bab685ceda32d375
  $fShowColor4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Yellow"#) -}
4ccbdccbe6745de1a8a2a83c657a460a
  $fShowColor5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Orange"#) -}
ea5739730924ae78a75879ec2606fb06
  $fShowColor6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Red"#) -}
910868b8da0db1dba2f0e7fae5327ce4
  $fShowColor_$cshow :: Cube.Color -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x1 :: Cube.Color) ->
                 Cube.$fShowColor_$cshowsPrec
                   GHC.Show.shows22
                   x1
                   (GHC.Types.[] @ GHC.Types.Char)) -}
910868b8da0db1dba2f0e7fae5327ce4
  $fShowColor_$cshowList :: [Cube.Color] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Cube.Color Cube.$w$cshowsPrec) -}
910868b8da0db1dba2f0e7fae5327ce4
  $fShowColor_$cshowsPrec ::
    GHC.Types.Int -> Cube.Color -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Cube.Color)
                   (w2 :: GHC.Base.String) ->
                 Cube.$w$cshowsPrec w1 w2) -}
40c1dfea01fca46b134941625c799199
  $fShowCube :: GHC.Show.Show Cube.Cube
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Cube.Cube
                  Cube.$fShowCube_$cshowsPrec
                  Cube.$fShowCube_$cshow
                  Cube.$fShowCube_$cshowList -}
40c1dfea01fca46b134941625c799199
  $fShowCube1 :: Cube.Cube -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Cube.Cube) (w1 :: GHC.Base.String) ->
                 case w of ww { Cube.Cube ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Cube.$w$cshowsPrec1 0# ww1 ww2 ww3 ww4 ww5 ww6 w1 }) -}
40c1dfea01fca46b134941625c799199
  $fShowCube_$cshow :: Cube.Cube -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x1 :: Cube.Cube) ->
                 Cube.$fShowCube_$cshowsPrec
                   GHC.Show.shows22
                   x1
                   (GHC.Types.[] @ GHC.Types.Char)) -}
40c1dfea01fca46b134941625c799199
  $fShowCube_$cshowList :: [Cube.Cube] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Cube.Cube Cube.$fShowCube1) -}
40c1dfea01fca46b134941625c799199
  $fShowCube_$cshowsPrec ::
    GHC.Types.Int -> Cube.Cube -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Cube.Cube)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Cube.Cube ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Cube.$w$cshowsPrec1 ww1 ww3 ww4 ww5 ww6 ww7 ww8 w2 } }) -}
7747cc53e94cae867fad4e946235194c
  $fShowFace :: GHC.Show.Show Cube.Face
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Cube.Face
                  Cube.$fShowFace_$cshowsPrec
                  Cube.$fShowFace_$cshow
                  Cube.$fShowFace_$cshowList -}
7747cc53e94cae867fad4e946235194c
  $fShowFace1 :: Cube.Face -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Cube.Face) (w1 :: GHC.Base.String) ->
                 case w of ww { Cube.Face ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 Cube.$w$cshowsPrec2 0# ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 w1 }) -}
7747cc53e94cae867fad4e946235194c
  $fShowFace_$cshow :: Cube.Face -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x1 :: Cube.Face) ->
                 Cube.$fShowFace_$cshowsPrec
                   GHC.Show.shows22
                   x1
                   (GHC.Types.[] @ GHC.Types.Char)) -}
7747cc53e94cae867fad4e946235194c
  $fShowFace_$cshowList :: [Cube.Face] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ Cube.Face Cube.$fShowFace1) -}
7747cc53e94cae867fad4e946235194c
  $fShowFace_$cshowsPrec ::
    GHC.Types.Int -> Cube.Face -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Cube.Face)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Cube.Face ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ->
                 Cube.$w$cshowsPrec2
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   w2 } }) -}
29a1e3fd5b247e93c19847a23b502be6
  $tc'Blue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4274212981144298219##
                   17138077928269284743##
                   Cube.$trModule
                   Cube.$tc'Blue1) -}
6344ef94aab012c691a922e5f2af03cf
  $tc'Blue1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Blue"#) -}
dfe50c67916c51cd684954eeddc4cd60
  $tc'Cube :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10129480031479422767##
                   17005188049732323914##
                   Cube.$trModule
                   Cube.$tc'Cube1) -}
bd297c7958e01eb5b19c8475a6e3ae40
  $tc'Cube1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Cube"#) -}
4ebc73307117c53a515ba09fa7a20d73
  $tc'Face :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3873562692775244240##
                   3512817519299882498##
                   Cube.$trModule
                   Cube.$tc'Face1) -}
985b2c856124d990feec338880f66b37
  $tc'Face1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Face"#) -}
8bfc927cdec34eb5ab1e995c40077798
  $tc'Green :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7020319692867574790##
                   9410645654234099346##
                   Cube.$trModule
                   Cube.$tc'Green1) -}
f5b854f4aa989c2db8ff0b2642b15ebd
  $tc'Green1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Green"#) -}
2bc3135d1d82cb80d0dc25c3f5e4ba1e
  $tc'Orange :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5170587854532731964##
                   3714010908850602304##
                   Cube.$trModule
                   Cube.$tc'Orange1) -}
317ddfa74535ff824fa103405f5fbcde
  $tc'Orange1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Orange"#) -}
2e31986c2a692302e915073c2128d301
  $tc'Red :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6644877971241338666##
                   14602444862196185846##
                   Cube.$trModule
                   Cube.$tc'Red1) -}
bb7bf101362e801b35b1ce76e0b7b9ff
  $tc'Red1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Red"#) -}
a53d9b04ce9e19329f8739c3bbb21a0d
  $tc'White :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2180283150055555949##
                   7785098089207052833##
                   Cube.$trModule
                   Cube.$tc'White1) -}
29df2397256a486ce7374f23b3062bdc
  $tc'White1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'White"#) -}
4a888ea9044761ae8d83d808f7eca7c0
  $tc'Yellow :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6719467184191330582##
                   14821810426348817043##
                   Cube.$trModule
                   Cube.$tc'Yellow1) -}
3e534c2cd3d4b84876a2b56fbcfe2f79
  $tc'Yellow1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Yellow"#) -}
3a3f4b6bbd3d7159af5cdc2deb77a5e4
  $tcColor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7781834435928786399##
                   7871726260991970702##
                   Cube.$trModule
                   Cube.$tcColor1) -}
837f059b03f20d54cb6ec8ef82e0cefc
  $tcColor1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Color"#) -}
991878f1fab122370120db11f3d2723c
  $tcCube :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4291270247433063634##
                   5295690416107342595##
                   Cube.$trModule
                   Cube.$trModule1) -}
676f53dbca884ab30faa4e101282b3e0
  $tcFace :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17821043310844319247##
                   11154734100295627455##
                   Cube.$trModule
                   Cube.$tcFace1) -}
2ec94cdafbc20858fa80ad7d46c2cc22
  $tcFace1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Face"#) -}
acf212d8d7845351be34f30e05ff2731
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Cube.$trModule2 Cube.$trModule1) -}
531eee249519f2e3ce934608f8db6128
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Cube"#) -}
22e6b7e9a90dae7ea757e9b24c8bf58c
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "RubiksCube-0.1.0.0-FagPvnyEIhB998iRCVnGlD"#) -}
11f66f6500c539a146cfd136edff229a
  $w$c== ::
    Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Face
    -> Cube.Face
    -> Cube.Face
    -> Cube.Face
    -> Cube.Face
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Face
    -> Cube.Face
    -> Cube.Face
    -> Cube.Face
    -> Cube.Face
    -> GHC.Types.Bool
  {- Arity: 28, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: [0] -}
6e308b584216bdac20d93436ec2175d5
  $w$c==1 ::
    Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> GHC.Types.Bool
  {- Arity: 18, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
910868b8da0db1dba2f0e7fae5327ce4
  $w$cshowsPrec :: Cube.Color -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Cube.Color) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Cube.Red -> GHC.Base.++ @ GHC.Types.Char Cube.$fShowColor6 w1
                   Cube.Orange -> GHC.Base.++ @ GHC.Types.Char Cube.$fShowColor5 w1
                   Cube.Yellow -> GHC.Base.++ @ GHC.Types.Char Cube.$fShowColor4 w1
                   Cube.Green -> GHC.Base.++ @ GHC.Types.Char Cube.$fShowColor3 w1
                   Cube.Blue -> GHC.Base.++ @ GHC.Types.Char Cube.$fShowColor2 w1
                   Cube.White
                   -> GHC.Base.++ @ GHC.Types.Char Cube.$fShowColor1 w1 }) -}
aa1af0d4764dd4f3890aa0f9dd4d1972
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Cube.Face
    -> Cube.Face
    -> Cube.Face
    -> Cube.Face
    -> Cube.Face
    -> Cube.Face
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 8,
     Strictness: <S,U><L,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,U>,
     Inline: [0] -}
97dd83f3aa9edd2110b410984685e3a0
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> Cube.Color
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 11,
     Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
910868b8da0db1dba2f0e7fae5327ce4
  data Color = Red | Orange | Yellow | Green | Blue | White
40c1dfea01fca46b134941625c799199
  data Cube
    = Cube {f :: Cube.Face,
            l :: Cube.Face,
            u :: Cube.Face,
            d :: Cube.Face,
            r :: Cube.Face,
            b :: Cube.Face}
7747cc53e94cae867fad4e946235194c
  data Face
    = Face {xlu :: Cube.Color,
            xu :: Cube.Color,
            xru :: Cube.Color,
            xl :: Cube.Color,
            x :: Cube.Color,
            xr :: Cube.Color,
            xrd :: Cube.Color,
            xd :: Cube.Color,
            xld :: Cube.Color}
6f1cb501202d4e23a320bb39cc6eeb02
  b :: Cube.Cube -> Cube.Face
  RecSel Left Cube.Cube
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,1*U(U,U,U,U,U,U,U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Cube.Cube) ->
                 case ds of wild { Cube.Cube ds1 ds2 ds3 ds4 ds5 ds6 -> ds6 }) -}
81ad0d067760132fbf76b59b13e6d016
  d :: Cube.Cube -> Cube.Face
  RecSel Left Cube.Cube
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U(U,U,U,U,U,U,U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Cube.Cube) ->
                 case ds of wild { Cube.Cube ds1 ds2 ds3 ds4 ds5 ds6 -> ds4 }) -}
e431e6ba66399461e3d39195ea995daf
  f :: Cube.Cube -> Cube.Face
  RecSel Left Cube.Cube
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U(U,U,U,U,U,U,U,U,U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Cube.Cube) ->
                 case ds of wild { Cube.Cube ds1 ds2 ds3 ds4 ds5 ds6 -> ds1 }) -}
22c7881d9f4b2eeb6bea71c8b508ee18
  l :: Cube.Cube -> Cube.Face
  RecSel Left Cube.Cube
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U(U,U,U,U,U,U,U,U,U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Cube.Cube) ->
                 case ds of wild { Cube.Cube ds1 ds2 ds3 ds4 ds5 ds6 -> ds2 }) -}
5b0aaa58d75c5316d207e89a5dac8ccf
  r :: Cube.Cube -> Cube.Face
  RecSel Left Cube.Cube
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,1*U(U,U,U,U,U,U,U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Cube.Cube) ->
                 case ds of wild { Cube.Cube ds1 ds2 ds3 ds4 ds5 ds6 -> ds5 }) -}
53d2113d81d89a0734576c05a9b5e56c
  startingCube :: Cube.Cube
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Cube.Cube
                   Cube.startingCube6
                   Cube.startingCube5
                   Cube.startingCube4
                   Cube.startingCube3
                   Cube.startingCube2
                   Cube.startingCube1) -}
0a523b4f184f3f699ade32e6b565ad03
  startingCube1 :: Cube.Face
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Cube.Face
                   Cube.Red
                   Cube.Red
                   Cube.Red
                   Cube.Red
                   Cube.Red
                   Cube.Red
                   Cube.Red
                   Cube.Red
                   Cube.Red) -}
df8586d0b3ab42901a0ad8db1fc446eb
  startingCube2 :: Cube.Face
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Cube.Face
                   Cube.Blue
                   Cube.Blue
                   Cube.Blue
                   Cube.Blue
                   Cube.Blue
                   Cube.Blue
                   Cube.Blue
                   Cube.Blue
                   Cube.Blue) -}
21a3159d90b419a88622e8b8fa82a58a
  startingCube3 :: Cube.Face
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Cube.Face
                   Cube.White
                   Cube.White
                   Cube.White
                   Cube.White
                   Cube.White
                   Cube.White
                   Cube.White
                   Cube.White
                   Cube.White) -}
cc5cba7a94691a3afa8fb020de83de18
  startingCube4 :: Cube.Face
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Cube.Face
                   Cube.Yellow
                   Cube.Yellow
                   Cube.Yellow
                   Cube.Yellow
                   Cube.Yellow
                   Cube.Yellow
                   Cube.Yellow
                   Cube.Yellow
                   Cube.Yellow) -}
57921ba305ed177b5c5327c1b8d789ef
  startingCube5 :: Cube.Face
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Cube.Face
                   Cube.Green
                   Cube.Green
                   Cube.Green
                   Cube.Green
                   Cube.Green
                   Cube.Green
                   Cube.Green
                   Cube.Green
                   Cube.Green) -}
804b0e47136502b22d7ee39ff383b965
  startingCube6 :: Cube.Face
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Cube.Face
                   Cube.Orange
                   Cube.Orange
                   Cube.Orange
                   Cube.Orange
                   Cube.Orange
                   Cube.Orange
                   Cube.Orange
                   Cube.Orange
                   Cube.Orange) -}
d51532fe484b701b37d96fbffcc86f7c
  u :: Cube.Cube -> Cube.Face
  RecSel Left Cube.Cube
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U(U,U,U,U,U,U,U,U,U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Cube.Cube) ->
                 case ds of wild { Cube.Cube ds1 ds2 ds3 ds4 ds5 ds6 -> ds3 }) -}
ae8bda5510c6dafba23998bef0011fa8
  x :: Cube.Face -> Cube.Color
  RecSel Left Cube.Face
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLL),1*U(A,A,A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Cube.Face) ->
                 case ds of wild { Cube.Face ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds5 }) -}
aecc4e152723d708eb4cce8e284eba23
  xd :: Cube.Face -> Cube.Color
  RecSel Left Cube.Face
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSL),1*U(A,A,A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Cube.Face) ->
                 case ds of wild { Cube.Face ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds8 }) -}
d8212dd2344a3123eadad251c3530bd0
  xl :: Cube.Face -> Cube.Color
  RecSel Left Cube.Face
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLL),1*U(A,A,A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Cube.Face) ->
                 case ds of wild { Cube.Face ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds4 }) -}
52efcdc65ce607145567db797f264090
  xld :: Cube.Face -> Cube.Color
  RecSel Left Cube.Face
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLS),1*U(A,A,A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Cube.Face) ->
                 case ds of wild { Cube.Face ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds9 }) -}
12cb8c26a84c5a7fc9d8754ef1237fd9
  xlu :: Cube.Face -> Cube.Color
  RecSel Left Cube.Face
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Cube.Face) ->
                 case ds of wild { Cube.Face ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds1 }) -}
dd8e87434c806cae2b7092ab815c603d
  xr :: Cube.Face -> Cube.Color
  RecSel Left Cube.Face
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLL),1*U(A,A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Cube.Face) ->
                 case ds of wild { Cube.Face ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds6 }) -}
3ee9593aa1560d73712721fb6bb7d3a1
  xrd :: Cube.Face -> Cube.Color
  RecSel Left Cube.Face
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLL),1*U(A,A,A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Cube.Face) ->
                 case ds of wild { Cube.Face ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds7 }) -}
fbb59c52f62fc9ae9a03e571ae66c09d
  xru :: Cube.Face -> Cube.Color
  RecSel Left Cube.Face
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLL),1*U(A,A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Cube.Face) ->
                 case ds of wild { Cube.Face ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds3 }) -}
ad451ce6033cbef30a1687c8da65d417
  xu :: Cube.Face -> Cube.Color
  RecSel Left Cube.Face
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Cube.Face) ->
                 case ds of wild { Cube.Face ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds2 }) -}
instance [safe] GHC.Classes.Eq [Cube.Color] = Cube.$fEqColor
instance [safe] GHC.Classes.Eq [Cube.Cube] = Cube.$fEqCube
instance [safe] GHC.Classes.Eq [Cube.Face] = Cube.$fEqFace
instance [safe] GHC.Show.Show [Cube.Color] = Cube.$fShowColor
instance [safe] GHC.Show.Show [Cube.Cube] = Cube.$fShowCube
instance [safe] GHC.Show.Show [Cube.Face] = Cube.$fShowFace
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

